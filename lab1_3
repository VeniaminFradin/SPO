#bubble 
def bubbleSort(numbers):
	n = 1
	while n < len(numbers):
		for i in range(len(numbers)-1):
			if numbers[i] > numbers[i+1]:
				numbers[i], numbers[i+1] = numbers[i+1], numbers[i]
		n += 1
	print(numbers)

#heap
def heapSort(numbers):
	def downHeap(numbers, index, size):
		newElem = numbers[index]
		while 2 * index + 1 < size:
			child = 2 * index + 1
			if child + 1 < size and numbers[child] < numbers[child + 1]:
				child += 1
			if newElem >= numbers[child]:
				break
			numbers[index] = numbers[child]
			index = child
		numbers[index] = newElem
	size = len(numbers)
	for i in range(size//2-1, -1, -1):
		downHeap(numbers, i, size)
	for i in range(size-1, 0, -1):
		numbers[i], numbers[0] = numbers[0], numbers[i]
		downHeap(numbers, 0, i)
	print(numbers)

#gnome 
def gnomeSort(numbers):
	i = 1
	while i < len(numbers):
		if i == 0:
			i = 1
		if numbers[i-1] < numbers[i]:
			i += 1
		else:
			numbers[i-1], numbers[i] = numbers[i], numbers[i-1]
			i -= 1
	print(numbers)
